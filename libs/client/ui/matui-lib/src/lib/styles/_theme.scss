
@use "sass:map";
@use "sass:list";

@use "utils/color";
@use "utils/custom-properties";

@use "pallet";


@function makeTheme($source: #006c4b){
  $primary: $source;
  $secondary: #018786 !default;

  $primary-pallet: pallet.make-pallet("primary", $source);
  $secondary-pallet: pallet.make-pallet("secondary", $secondary);


  $theme: list.concat($primary-pallet, $secondary-pallet);
  
/*
  (
    on-primary: if(contrast-tone($primary) == 'dark', #000, #fff),

    on-secondary: if(contrast-tone($secondary) == 'dark', #000, #fff),
  ) !global;
*/

  @return $theme;
}

@function theme-var($key, $fallback: null) {
  @if ($fallback) {
      @return var($key, $fallback);
  } @else {
      @return var($key);
  }
}

$md-sys-color-primary: "--md-sys-color-primary";
:root{
  #{$md-sys-color-primary}: theme-var(--md-ref-palette-primary40);
}

$source: #006c4b !default;

$surface: #fff !default;
$on-surface: if(contrast-tone($surface) == 'dark', #000, #fff) !default;

$error: #b00020 !default;
$on-error: if(contrast-tone($error) == 'dark', #000, #fff) !default;


@mixin style($theme) {
  :root {
    @each $space, $value in $theme {
      //--md-ref-palette-primary#{$space}: #{$value};
      @include custom-properties.declaration($value);
    }
  }
}
