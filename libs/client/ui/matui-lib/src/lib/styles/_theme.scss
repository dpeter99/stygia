
@use "sass:map";
@use "sass:list";

@use "utils/color";
@use "utils/custom-properties" as prop;

@use "pallet";

@function base-tokens(){
  @return (
    prop.create("sys-color-primary", pallet.palette-prop("primary", 40)),
    prop.create("sys-color-primary-container", pallet.palette-prop("primary", 90)),

    prop.create("sys-color-surface", pallet.palette-prop("neutral", 99)),
    prop.create("sys-color-surface-tint", prop.create("sys-color-primary")),


    //prop.create("sys-color-surface-elevation-0", mix(var(--mdc-sys-color-surface), var(--mdc-sys-color-surface-tint), 5)),
  );
}

@function make-theme($source: #006c4b){
  $theme: ();

  $primary: $source;
  $primary-pallet: pallet.make-pallet("primary", $source);
  $theme: list.join($theme, $primary-pallet);


  $secondary: adjust-hue($source, 180); //#018786 !default;
  $secondary-pallet: pallet.make-pallet("secondary", $secondary);
  $theme: list.join($theme, $secondary-pallet);

  $neutral: #5c5f5c; //#018786 !default;
  $neutral-pallet: pallet.make-pallet("neutral", $neutral);
  $theme: list.join($theme, $neutral-pallet);

  $theme: list.join($theme, base-tokens());

  @return $theme;
}

@function theme-var($key, $fallback: null) {
  @if ($fallback) {
      @return var($key, $fallback);
  } @else {
      @return var($key);
  }
}


@mixin style($theme) {
  :root {
    @each $value in $theme {
      @include prop.declaration($value);
    }
  }
}
